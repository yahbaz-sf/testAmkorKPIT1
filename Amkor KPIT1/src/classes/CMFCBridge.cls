/*************************************************************************
*
* PURPOSE: Bridge for Flip Chip product groups
*
* CLASS: CMFCBridge
* CREATED: 7/17/2012 Ethos Solutions - www.ethos.com
* AUTHOR: Austin Delorme
***************************************************************************/
public with sharing class CMFCBridge extends CMFCMBridgeBase
{
	CM_Factory_Value__c boatVal {get; set;} 
	CM_Factory_Value__c trayVal {get; set;}
	CM_Factory_Value__c capUPHMultVal {get; set;}

	//have these as class variables because two methods need them, and it is a somewhat expensive calculation
	Decimal pelletSize {get; set;}
	Decimal moldCapWt {get; set;}
	Decimal unitsPerPellet {get; set;}

	public override void setup()
	{
		super.setup();
		if (!(wrapper.packageFamily.No_Cost_Model__c || wrapper.rfqItem.Do_Not_Auto_Price__c))
		{		
			List<CM_Factory_Value__c> factList = CMFactoryValueDao.getInstance().getByVersion(ver.Id);
			Decimal bodySize = getBodySize();

			String boatKey = 'Boat-' + bodySize;
			String trayKey = 'Tray-' + bodySize;

			for (CM_Factory_Value__c row : factList)
			{
				if (row.Key__c == boatKey) boatVal = row;
				else if (row.Key__c == trayKey) trayVal = row;
			}

			if (boatVal == null) boatVal = new CM_Factory_Value__c(Value__c='0');
			if (trayVal == null) trayVal = new CM_Factory_Value__c(Value__c='0');

			if (getNumberOfDies() > 0)
			{
				String capUPHMultKey = 'CapUPHMult-' + boatVal.Value__c + 'bt-' + getAverageDieSize();
				for (CM_Factory_Value__c row : factList)
				{
					if (row.Key__c == capUPHMultKey) capUPHMultVal = row;
				}
			}

			//default value if no body size, gotten from y=mx+b formula generated by known values. m and b are on pfValue
			Decimal pfValUPHMult = (pfValue == null || pfValue.Capacitor_UPH_Multiplier__c == null) ? 0 : pfValue.Capacitor_UPH_Multiplier__c;
			Decimal pfValUPHAdder = (pfValue == null || pfValue.Capacitor_UPH_Adder__c == null) ? 0 : pfValue.Capacitor_UPH_Adder__c;

			if (capUPHMultVal == null) capUPHMultVal = new CM_Factory_Value__c(Value__c=String.valueOf(
						pfValUPHMult * Decimal.valueOf(boatVal.Value__c) + pfValUPHAdder));
		}
	}

	public override void loadFcmAssumption()
    {
        if (fcmA == null)
        {
            List<FCM_Assumption__c> assumptionList = FCMAssumptionDao.getInstance().getByFactoryAndVersion((String)wrapper.specificRfqItem.get('Factory__c'), ver.id);
			if (assumptionList.size() > 0)
			{
				fcmA = assumptionList[0];
			}
			else
			{
				fcmA = new FCM_Assumption__c();
			}      
        }
    }

    public override Decimal getIndirectLaborFactor()
	{
		//per spreadsheet, flat rate for forecast factor
		return (fcmA == null) ? 0 : getDecimal(fcmA, 'Forecast_Factor_1__c', 0.0);		
	}

	public Decimal getDieGDPW()
	{
		Decimal dieX = UnitUtils.getInstance().convert(getDieX(), UnitUtils.UNIT_MM, UnitUtils.UNIT_MIL);
		Decimal dieY = UnitUtils.getInstance().convert(getDieY(), UnitUtils.UNIT_MM, UnitUtils.UNIT_MIL);
		Decimal waferSize = Math.round(UnitUtils.getInstance().convert(getDieWaferSize(),UnitUtils.UNIT_MM, UnitUtils.UNIT_INCH));
		Decimal dieYield = getDieYield();
		Decimal gdpw = ((dieX/1000 * dieY/1000) == 0) ? 0 : (((3.14159265 * (waferSize/2) * (waferSize/2)) / (dieX/1000 * dieY/1000)) * dieYield).round(RoundingMode.FLOOR);
		return (gdpw * getChipYield()/100).round(RoundingMode.HALF_UP);
		//return 450;
	}

	public Decimal getDieYield()
	{
    	return getDecimal(pfValue, 'GDPW_Die_Yield__c', 0);
	}

	public override Decimal getUtilizationEfficiency(String forecastVal)
	{
		String field = 'Utilization_Efficiency_Percent__c';
		if (forecastVal == '<01') field = 'Utilization_Efficiency_Percent_T1__c'; 
		else if (forecastVal == '<10') field = 'Utilization_Efficiency_Percent_T2__c'; 
		else if (forecastVal == '<25') field = 'Utilization_Efficiency_Percent_T3__c'; 
		else if (forecastVal == '<75') field = 'Utilization_Efficiency_Percent_T4__c'; 
		else if (forecastVal == '<150') field = 'Utilization_Efficiency_Percent_T5__c'; 
		else if (forecastVal == '<250') field = 'Utilization_Efficiency_Percent_T6__c'; 
		else if (forecastVal == '<500') field = 'Utilization_Efficiency_Percent_T7__c'; 
		else if (forecastVal == '>500') field = 'Utilization_Efficiency_Percent_T7__c';

		return getDecimal(fcmA, field, 0.0);
	}

	
	public override Decimal getForecastVolumePerWeek( String forecast)
	{
		Map<String, Decimal> forecastMap = ForecastUtil.getMaxMinForecast(forecast, wrapper.productGroup.Name, wrapper.packageFamily.Name);
		Decimal minForecast = forecastMap.get('min');
		Decimal maxForecast = forecastMap.get('max');
		return ((minForecast + maxForecast)/2.0).round(System.RoundingMode.HALF_UP);
	}

	public Decimal getChipYield()
	{
		//getDecimal(pfValue, 'Chip_Yield_Percentage__c', 0);
		//add above line after field is added to CM_PF_Value
		return getDecimal(wrapper.specificRfqItem, 'Die_Yield__c', 0);
	}

	public Decimal getNumberOfDies()
	{
		return wrapper.dieConfigurations.size();
	}

	public Decimal getUnitPerBoat()
	{
		return Decimal.valueOf(boatVal.Value__c);

	}

	public Decimal getUnitPerTray()
	{
		return Decimal.valueOf(trayVal.Value__c);
	}

	public Decimal getOSSamplingPerc()
	{
		return getDecimal(wrapper.specificRfqItem, 'OS_Sampling_Perc__c', 0) / 100;
	}

	public Decimal getOMChase()
	{
		return getDecimal(wrapper.specificRfqItem, 'OM_Chase__c', 0);
	}

	public Decimal getOMThickness()
	{
		return getDecimal(wrapper.specificRfqItem, 'OM_Thickness__c', 0);
	}

 	public Decimal getBodySize()
    {
    	return getDecimal(wrapper.specificRfqItem, 'Body_X__c', 0);
    }

    public Decimal getWBGThickness()
    {
    	return getDecimal(selectedDie, 'WBG_Final_Thickness__c', 0);
    	//return 300;
    }

    public Decimal getLGCalc()
    {

    	Decimal waferSize = Math.round(UnitUtils.getInstance().convert(getDieWaferSize(),UnitUtils.UNIT_MM, UnitUtils.UNIT_INCH));
    	Decimal dieX = UnitUtils.getInstance().convert(getDieX(0), UnitUtils.UNIT_MM, UnitUtils.UNIT_MIL);
    	Decimal dieY = UnitUtils.getInstance().convert(getDieY(0), UnitUtils.UNIT_MM, UnitUtils.UNIT_MIL);
    	Decimal passNumber = getLGPass();
    	Decimal goodDieDensity = getGoodDieDensity();
    	Decimal adderX = (dieX < 100) ? 4 : 3;
    	Decimal adderY = (dieY < 100) ? 4 : 3;
    	Decimal cuttingSpeed = getCuttingSpeed();
    	Decimal dieGDPW = getDieGDPW();
    	Decimal chipYield = getChipYield()/100;

    	//makes no sense to do calculations if die sizes are 0
    	if (dieX == 0 || dieY == 0) return 0;

    	Decimal cuttingLineX = (waferSize * 1000/dieX + adderX);
    	Decimal cuttingLineY = (waferSize * 1000/dieY + adderY);

    	cuttingLineX = cuttingLineX.setScale(0, RoundingMode.DOWN);
		cuttingLineY = cuttingLineY.setScale(0, RoundingMode.DOWN);

    	Decimal[] passNums = new Decimal[]{passNumber, 5};
    	Decimal[] results = new Decimal[2];

    	Decimal passNum, goodDieQty, stdTimeWaf, stdTimeUnit, stdUph, stdWph, result;
    	for (Integer i = 0; i < 2; i++)
    	{
    		passNum = passNums[i];

    		//only divide by 0 operations are divide by dieX/dieY, which are already checked for
	    	goodDieQty = (goodDieDensity * ((waferSize * 1000 - dieX)/2 * (waferSize * 1000 - dieY)/2 * 3.141592654/(dieX * dieY) + 0.5)).setScale(0, RoundingMode.DOWN);

	    	stdTimeWaf = (cuttingSpeed == 0) ? 0 : (((((waferSize*1000)+((((waferSize*1000)*(cuttingLineX-1)/2)-((((cuttingLineX-1)/2)*(((cuttingLineX-1)/2)+1)/2)*dieX))*passNum))+((waferSize*1000)+((((waferSize*1000)*(cuttingLineY-1)/2)-((((cuttingLineY-1)/2)*(((cuttingLineY-1)/2)+1)/2)*dieY))*2)))/cuttingSpeed)*passNum)+160+120;
	    	stdTimeUnit = (goodDieQty == 0) ? 0 : stdTimeWaf / goodDieQty;

	    	stdUph = (stdTimeUnit == 0 ) ? 0 : 3600 / stdTimeUnit;
	    	stdWph = (stdTimeWaf == 0 ) ? 0 : 3600 / stdTimeWaf;

	    	result = stdWph * dieGDPW * chipYield;
	    	results[i] = result;
	    }


    	return (results[1] == 0) ? 0 : results[0] / results[1];
    }

    public Decimal getLGPass()
    {
    	return getDecimal(wrapper.specificRfqItem, 'LG_Pass__c', 0);
    }

    public Decimal getGoodDieDensity()
    {
    	return getDecimal(pfValue, 'Good_Die_Density__c', 0);
    }

    public Decimal getCuttingSpeed()
    {
    	return getDecimal(pfValue, 'Cutting_Speed__c', 0);
    }

	public Decimal getToolingForecast()
	{
		return getToolingForecast((String)wrapper.specificRfqItem.get('Forecast__c'));
	}
	public Decimal getToolingForecast(String newForecast)
	{
		//gotten by equaltion of a line formula using points on "Tooling" tab, cells B4:C7
		return -2000/3.0 * getUtilizationEfficiency(newForecast)/100.0 + 2300/3.0;
	}

	public Decimal getCapacityForecast()
	{
		return getCapacityForecast((String)wrapper.specificRfqItem.get('Forecast__c'));
	}
	public Decimal getCapacityForecast(String newForecast)
	{
		//gotten by equaltion of a line formula using points on "Tooling" tab, cells B4:C7
		return (250*(1-0.4/0.85)/0.45)*getUtilizationEfficiency(newForecast)/100.0;
	}

	public Decimal getCapacitorStandardUsage()
	{
		return getDecimal(selectedPassive, 'Number_of_Passives__c', 0);
	}

	public Decimal getCapacitorPurchasePrice()
	{
		return getDecimal(selectedPassive, 'Purchase_Price__c', 0);
	}

	public Decimal getTotalCapacitorStandardUsage()
	{
		Decimal stdUsage = 0;
		for (SObject passive : wrapper.passiveConfigurations)
		{
			if (passive.get('Passive_Type__c') == 'Capacitor') stdUsage += getDecimal(passive, 'Number_of_Passives__c', 0);
		}
		return stdUsage;
	}

	public Decimal getLidFoot()
	{
		Decimal bodySize = getBodySize();

		if (bodySize < 27) return 2;
		else if (bodySize < 31) return 3;
		else if (bodySize < 46) return 4;
		else return 6;
	}

	public Decimal getDAThickness()
	{
		return getDecimal(pfValue, 'DA_Thickness__c', 0);
	}

	public Decimal getBallCount()
	{
		//---TODO
		return getDecimal(wrapper.specificRfqItem, 'Number_of_BGA_Balls__c', 0);
	}

	public Decimal getRecommendedPellets()
	{
		Decimal substrateX = getBodySize();
		Decimal substrateY = getBodySize();
		Decimal dieX = getDieX(0);
		Decimal dieY = getDieY(0);
		Decimal bsg = (785 - getWBGThickness()) / 1000;
		Decimal omThickness = getOMThickness() / 1000;
		Decimal grooveWidth = getGrooveWidth();
		Decimal substratePerimeterClearance = getSubstratePerimeterClearance();
		Decimal moldCapTaper = getMoldCapTaper();
		Decimal emcCostPerGram = getEMCCostPerGram();

		Decimal modelCapVolumeMM = (((substrateX-(substratePerimeterClearance*2))*(substrateY-(substratePerimeterClearance*2))*(0.9-bsg))-(dieX*dieY*(0.9-bsg)))
								   - moldCapTaper/2 * ((substrateX-(substratePerimeterClearance*2))*(substrateY-(substratePerimeterClearance*2))*(0.9-bsg))
								   + moldCapTaper/2 * ((dieX+(grooveWidth*2)+2) * (dieY+(grooveWidth*2)+2)*(0.9-bsg))
								   + ((substrateX-(substratePerimeterClearance*2)) * (substrateY-(substratePerimeterClearance*2)) * (omThickness));

		Decimal modelCapVolumeML = 0.001 * modelCapVolumeMM;
		moldCapWt = modelCapVolumeML * getPelletVolume();
		Decimal totalChaseVolume = getUnitsPerPellet(substrateX) * modelCapVolumeML + getEMCWasteTotal(substrateX);
		Decimal totalChaseEMC = totalChaseVolume * getPelletVolume();
		Decimal totalChaseEMCWithMargin = totalChaseEMC * 1.1;

		Decimal totalChaseEMCRound = mRound(totalChaseEMCWithMargin, 0.5);

		pelletSize = (totalChaseEMCRound < 3) ? 3 : totalChaseEMCRound;
		return pelletSize;
	}


	public Decimal getUnitsPerPellet()
	{
		return getUnitsPerPellet(getBodySize());
	}

	public Decimal getUnitsPerPellet(Decimal bodySize)
	{
		if (bodySize < 26) unitsPerPellet = 4;
		else if (bodySize > 35) unitsPerPellet = 1;
		else if (bodySize > 25) unitsPerPellet = 2;

		else unitsPerPellet = 1;

		return unitsPerPellet;
	}

	public Decimal getPercWastePerShot()
	{
		return 1 - (moldCapWt * unitsPerPellet / pelletSize);
	}

	public Decimal getGrooveWidth()
	{
		return getDecimal(pfValue, 'Groove_Width__c', 0);
	}
	public Decimal getSubstratePerimeterClearance()
	{
		return getDecimal(pfValue, 'Substrate_Perimeter_Clearance__c', 0);
	}
	public Decimal getMoldCapTaper()
	{
		return getDecimal(pfValue, 'Mold_Cap_Taper__c', 0);
	}
	public Decimal getEMCCostPerGram()
	{
		return getDecimal(pfValue, 'EMC_Cost_per_Gram__c', 0);
	}

	public Decimal getPelletVolume()
	{
		return getDecimal(pfValue, 'Pellet_Volume__c', 0);
	}

	public Decimal getEMCWasteTotal(Decimal substrateX)
	{
		return (5165.6071 - 100.89286 * substrateX) / 1000;
	}

	public Decimal getLidCount()
	{
		return (String)wrapper.specificRfqItem.get('Package_Structure__c') == '2-pc Lid' ? 2 : 1;
	}

	public override Decimal getSubstrateMarkup()
	{
		return getDecimal(wrapper.specificRfqItem, 'Subs_Markup_Perc__c', 0);
	}

	public Decimal getNumberOfPassives()
	{
		return wrapper.passiveConfigurations.size();
	}

	public Decimal getNumberOfCapacitors()
	{
		return getDecimal(selectedPassive, 'Number_of_Passives__c', 0);
	}
	public Decimal getTotalNumberOfCapacitors()
	{
		Decimal capCount = 0;
		for (sObject passive : wrapper.passiveConfigurations)
		{
			if ((String)passive.get('Passive_Type__c') == 'Capacitor') capCount += (Decimal)passive.get('Number_of_Passives__c');
		}

		return capCount;
	}

	public Decimal getSubstratePurchasePrice()
	{
		return getDecimal(wrapper.specificRfqItem, 'Substrate_Purchase_Price__c', 0);
	}

	public Decimal getCapacitorUPHFactor()
	{
		return Decimal.valueOf(capUPHMultVal.Value__c);
	}

	public Decimal getAverageDieSize()
	{
		return Math.sqrt(getDieY(0) * getDieX(0)).round(RoundingMode.HALF_UP);
	}

	public Decimal mRound(Decimal value, Decimal factor) {
	    return (value / factor).round(RoundingMode.HALF_UP) * factor;
	}


	public override void writeResults(RFQI_FCM__c itemFcm, Boolean isUpdate)
	{
		debug.log('writeResults');
		
		Decimal buPrice = itemFcm.Total_Price__c == null ? 0 : (Decimal)itemFcm.Total_Price__c ;
		wrapper.specificRfqItem.put( 'BU_Price__c', buPrice);
		
		Decimal customerPrice = wrapper.specificRfqItem.get('Price_To_Customer__c') == null ? 0 : (Decimal)wrapper.specificRfqItem.get('Price_To_Customer__c');
		if(customerPrice < buPrice)
			wrapper.specificRfqItem.put('Price_To_Customer__c',buPrice);
		else
			wrapper.specificRfqItem.put('Price_To_Customer__c',customerPrice);

		wrapper.specificRfqItem.put( 'Subs_Markup_Perc__c', itemFcm.Substrate_Markup_Percent__c);
		wrapper.specificRfqItem.put( 'Assembly_GM_wo_Substrate__c', itemFcm.Margin_Less_Substrate_Percent__c);
		wrapper.specificRfqItem.put( 'Materials_Subtotal__c', itemFcm.Total_Material_Cost__c);
		wrapper.specificRfqItem.put( 'Total_Cost_with_Substrate_New__c', itemFcm.Total_Cost_of_Goods__c);
		wrapper.specificRfqItem.put( 'CLAM_OH__c', itemFcm.Manufacturing_Overhead__c);

		wrapper.clearPriceToCustomerIfRequired();

		wrapper.specificRfqItem.put( 'CLAM_Direct_Labor__c', itemFcm.Total_Direct_Labor__c);
		wrapper.specificRfqItem.put( 'CLAM_Indirect_Labor__c', itemFcm.Total_Indirect_Labor__c);
		wrapper.specificRfqItem.put( 'CLAM_Depreciation__c', itemFcm.Total_Equipment_Depreciation__c);
		wrapper.specificRfqItem.put( 'CLAM_OCOGS__c', itemFcm.Other_Cost_Of_Goods_Sold__c);

		wrapper.specificRfqItem.put( 'Materials_ODM__c', itemFcm.Total_BOM_ODM__c);
		wrapper.specificRfqItem.put( 'Materials_Substrate__c', itemFcm.Total_BOM_Substrate__c);


		Decimal totalCLAM = getDecimal(itemFcm, 'Total_Direct_Labor__c', 0) +
		getDecimal(itemFcm, 'Manufacturing_Overhead__c', 0) +
		getDecimal(itemFcm, 'Total_Equipment_Depreciation__c', 0);

		wrapper.specificRfqItem.put('CLAM_Subtotal_New__c', itemFcm.CLAM__c);

		wrapper.specificRfqItem.put('Total_Perc_GM__c', itemFcm.Margin_Percent__c); 
		wrapper.specificRfqItem.put('Perc_VAM_New__c', itemFcm.VAM_Percent__c * 100); 

		//---IRR
		CMPBGAIRRCalc irrCalc = new CMPBGAIRRCalc();

		String factoryName;
		sObject factory = wrapper.specificRfqItem.getSObject('Factory__r');
        if(factory != null) factoryName = (String)factory.get('Name');

		Decimal irr = irrCalc.calculate(7, factoryName, (Decimal)wrapper.rfqItem.get('Forecast_Median__c'), 
			itemFcm.Total_Material_Cost__c, itemFcm.CLAM__c, buPrice, itemFcm.Total_Direct_Labor__c + itemFcm.Total_Indirect_Labor__c, itemFcm.Total_Capital__c * -1.0);
		wrapper.specificRfqItem.put('Perc_IRR_New__c', irr * 100); 


		calculatePackageItemValue(wrapper, buPrice);

		if(isUpdate) update wrapper.specificRfqItem;
		
	}

}